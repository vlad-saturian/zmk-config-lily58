/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <31 32>;
            layers = <0 1 2 3>;
        };

        backspace_hard {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <31 32 33>;
            layers = <0 1 2 3>;
        };

        parenthesis_left {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 20>;
        };

        parenthesis_right {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <21 19>;
        };

        backspace_hard_2 {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <31 33>;
            layers = <0 2 1 3>;
        };

        switch_to_win_layer {
            bindings = <&tog 1>;
            key-positions = <53 52 54 55>;
            require-prior-idle-ms = <60>;
        };

        parenthesis_right_2 {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <21 20>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <19 22>;
        };

        windows_left_key {
            bindings = <&kp LEFT_WIN>;
            key-positions = <50 51>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESC    &kp N1  &kp N2  &kp N3    &kp N4    &kp N5                                       &kp N6       &kp N7            &kp N8         &kp N9   &kp N0    &kp BACKSPACE
&kp TAB    &kp Q   &kp W   &kp E     &kp R     &kp T                                        &kp Y        &kp U             &kp I          &kp O    &kp P     &kp LEFT_BRACKET
&mo 2      &kp A   &kp S   &kp D     &kp F     &kp G                                        &kp H        &kp J             &kp K          &kp L    &kp SEMI  &kp SINGLE_QUOTE
&kp LSHFT  &kp Z   &kp X   &kp C     &kp V     &kp B        &mo 5        &kp RIGHT_BRACKET  &kp N        &kp M             &kp COMMA      &kp DOT  &kp FSLH  &mt RSHFT ENTER
                           &kp LALT  &kp LGUI  &lt 3 SPACE  &kp SPACE    &kp ENTER          &lt 4 ENTER  &kp LEFT_CONTROL  &kp C_AL_LOCK
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        windows_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans            &trans                    &trans  &trans  &trans             &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans                    &trans  &trans  &trans             &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans                    &trans  &trans  &trans             &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans  &trans    &trans  &trans  &trans  &trans             &trans  &trans  &trans
                        &trans  &kp LEFT_CONTROL  &trans  &trans    &trans  &trans  &trans  &kp RIGHT_COMMAND
            >;
        };

        caps_layer {
            // --------------------------------------------------------------------------------------------------------------
            // | LPAD  | BRDn | BRUp |  MUT |  Vo- |  Vo+ |                   |      |       |       |      |       |       |
            // |  F1   |  F2  |  F3  |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !   |  @   |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |      |      |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                       |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp RA(RG(RC(GRAVE)))  &kp RC(RA(RG(NUMBER_1)))  &kp RC(RA(RG(NUMBER_2)))  &kp RC(RA(RG(NUMBER_3)))  &kp RC(RA(RG(NUMBER_4)))  &kp RA(RC(RG(N5)))                                  &trans      &kp STAR          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans           &kp LS(BACKSPACE)
&kp RC(DOWN_ARROW)     &kp LS(LEFT_ARROW)        &kp UP_ARROW              &kp LS(RIGHT_ARROW)       &kp RG(RC(RA(R)))         &kp RG(RC(RA(T)))                                   &kp DOLLAR  &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp LEFT_BRACE         &kp RIGHT_BRACE  &kp BACKSLASH
&trans                 &kp LEFT_ARROW            &kp DOWN_ARROW            &kp RIGHT_ARROW           &kp RC(RG(RA(F)))         &kp RA(RG(RC(G)))                                   &kp EQUAL   &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES     &kp GRAVE              &kp UNDERSCORE   &kp TILDE
&trans                 &trans                    &trans                    &kp BACKSPACE             &kp RA(RC(RG(V)))         &kp RA(RC(RG(B)))   &trans       &kp LC(BACKSPACE)  &kp STAR    &kp PLUS          &kp MINUS             &kp LBRC               &kp QUESTION     &trans
                                                                           &trans                    &trans                    &kp ENTER           &kp ENTER    &trans             &trans      &trans            &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp C_BRIGHTNESS_INC  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                                               &kp F6        &kp F7         &kp F8            &kp F9     &kp F10        &trans
&kp C_BRIGHTNESS_DEC  &kp NUMBER_0  &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1  &kp F6                                               &kp ASTERISK  &kp PERCENT    &trans            &trans     &trans         &trans
&kp F4                &kp ENTER     &kp NUMBER_6  &kp NUMBER_5  &kp NUMBER_4  &kp LA(LS(C_VOLUME_UP))                              &kp EQUAL     &kp BACKSLASH  &kp LEFT_BRACKET  &kp APOS   &trans         &trans
&kp LC(APOS)          &kp DOT       &kp NUMBER_9  &kp NUMBER_8  &kp NUMBER_7  &kp LA(LS(C_VOL_DN))     &kp C_PLAY_PAUSE    &trans  &kp KP_PLUS   &kp PLUS       &kp MINUS         &kp ASTRK  &kp KP_DIVIDE  &trans
                                                  &trans        &trans        &trans                   &trans              &trans  &trans        &trans         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        higher_layer {
            bindings = <
&trans  &trans  &trans                      &trans                      &trans                       &trans                    &trans     &trans          &trans          &trans           &trans  &trans
&trans  &trans  &trans                      &kp RA(RC(RG(UP_ARROW)))    &kp RA(RG(RC(ENTER)))        &trans                    &trans     &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &trans  &trans
&trans  &trans  &kp RA(RC(RG(LEFT_ARROW)))  &kp RA(RC(RG(DOWN_ARROW)))  &kp RA(RC(RG(RIGHT_ARROW)))  &trans                    &mkp MCLK  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans                      &trans                      &trans                       &trans  &trans    &trans  &trans     &msc SCRL_UP    &msc SCRL_DOWN  &trans           &trans  &trans
                                            &trans                      &trans                       &trans  &trans    &trans  &trans     &trans          &trans
            >;
        };

        bluetooth_controls {
            bindings = <
&trans  &trans  &trans        &trans        &trans        &trans                             &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans        &trans        &bl BL_CYCLE  &rgb_ug RGB_TOG                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans        &trans        &trans        &bt BT_CLR       &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                              &trans        &trans        &trans           &trans    &trans  &trans  &trans  &trans
            >;
        };
    };
};
