/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <31 32>;
        };

        parenthesis_left {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 20>;
        };

        parenthesis_right {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <21 19>;
        };

        backspace_hard {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <31 33>;
        };

        parenthesis_right_2 {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <21 20>;
        };

        comment {
            bindings = <&kp LG(SLASH)>;
            key-positions = <19 22>;
            layers = <0 2>;
        };

        windows_left_key {
            bindings = <&kp LEFT_WIN>;
            key-positions = <50 51>;
            layers = <1>;
        };

        home_in_caps_layer_mac {
            bindings = <&kp LG(LEFT_ARROW)>;
            key-positions = <25 26>;
            layers = <2 4>;
        };

        end_in_caps_layer_mac {
            bindings = <&kp LG(RIGHT_ARROW)>;
            key-positions = <26 27>;
            layers = <2 4>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <31 34>;
        };

        lang_change_mac {
            bindings = <&kp F4>;
            key-positions = <28 25>;
            layers = <0>;
        };

        lang_change_win {
            bindings = <&kp LA(LEFT_SHIFT)>;
            key-positions = <28 25>;
            layers = <1>;
        };

        text_select_bulky_right {
            bindings = <&kp LA(LS(RIGHT_ARROW))>;
            key-positions = <14 15>;
            layers = <2>;
        };

        text_select_bulky_left {
            bindings = <&kp LA(LS(LEFT_ARROW))>;
            key-positions = <14 13>;
            layers = <2>;
        };

        copy_mac {
            bindings = <&mt LG(LS(C)) LG(C)>;
            key-positions = <39 38>;
            layers = <0 2 4>;
        };

        paste_mac {
            bindings = <&mt LG(LS(LA(V))) LG(V)>;
            key-positions = <39 40>;
            layers = <0 2 4>;
            require-prior-idle-ms = <50>;
            slow-release;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <40 38>;
            require-prior-idle-ms = <50>;
        };

        copy_win {
            bindings = <&kp LC(C)>;
            key-positions = <39 38>;
            layers = <1 3>;
            require-prior-idle-ms = <50>;
        };

        paste_win {
            bindings = <&kp LC(V)>;
            key-positions = <39 40>;
            layers = <1 3>;
        };

        shortcut_screen_left {
            bindings = <&kp RA(RC(RG(LEFT_ARROW)))>;
            key-positions = <45 46>;
            require-prior-idle-ms = <100>;
            layers = <2 3>;
        };

        shortcut_screen_right {
            bindings = <&kp RA(RC(RG(RIGHT_ARROW)))>;
            key-positions = <45 47>;
            require-prior-idle-ms = <100>;
            layers = <2 3>;
        };

        shortcut_screen_full {
            bindings = <&kp RA(RC(RG(ENTER)))>;
            key-positions = <45 48>;
            require-prior-idle-ms = <100>;
            layers = <2 3>;
        };

        shortcut_screen_next {
            bindings = <&kp RA(RC(RG(UP_ARROW)))>;
            key-positions = <46 47>;
            require-prior-idle-ms = <100>;
            layers = <2 3>;
        };

        page_up {
            bindings = <&mt HOME PAGE_UP>;
            key-positions = <30 31>;
        };

        page_down {
            bindings = <&mt END PAGE_DOWN>;
            key-positions = <44 45>;
        };

        arrow_right_by_word {
            bindings = <&kp LA(RIGHT_ARROW)>;
            key-positions = <28 27>;
            layers = <0 4>;
        };

        arrow_left_by_word {
            bindings = <&kp LA(LEFT_ARROW)>;
            key-positions = <28 26>;
            layers = <0 4>;
        };

        find_mac {
            bindings = <&mt LS(LG(F)) LG(F)>;
            key-positions = <37 40>;
            layers = <0 4>;
        };

        find_win {
            bindings = <&mt LS(LC(F)) LC(F)>;
            key-positions = <37 40>;
            layers = <1>;
        };
    };

    behaviors {
        toggle_caps_layer_mac: toggle_caps_layer_mac {
            compatible = "zmk,behavior-tap-dance";
            label = "TOGGLE_CAPS_LAYER_MAC";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&tog 2>;
        };

        toggle_caps_layer_win: toggle_caps_layer_win {
            compatible = "zmk,behavior-tap-dance";
            label = "TOGGLE_CAPS_LAYER_WIN";
            #binding-cells = <0>;
            bindings = <&mo 3>, <&tog 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&mt LEFT_CONTROL ESCAPE  &kp N1  &kp N2  &kp N3    &kp N4    &kp N5                                   &kp N6       &kp N7            &kp N8         &kp N9   &kp N0    &kp BACKSPACE
&kp TAB                  &kp Q   &kp W   &kp E     &kp R     &kp T                                    &kp Y        &kp U             &kp I          &kp O    &kp P     &kp LEFT_BRACKET
&toggle_caps_layer_mac   &kp A   &kp S   &kp D     &kp F     &kp G                                    &kp H        &kp J             &kp K          &kp L    &kp SEMI  &kp SINGLE_QUOTE
&kp LSHFT                &kp Z   &kp X   &kp C     &kp V     &kp B        &mo 6        &kp BACKSLASH  &kp N        &kp M             &kp COMMA      &kp DOT  &kp FSLH  &mt RSHFT ENTER
                                         &kp LALT  &kp LGUI  &lt 4 SPACE  &kp SPACE    &kp ENTER      &lt 5 ENTER  &kp LEFT_CONTROL  &kp C_AL_LOCK
            >;
        };

        windows_layer {
            bindings = <
&kp ESC                 &trans  &trans  &trans        &trans            &trans                    &trans  &trans  &trans             &trans  &trans  &trans
&trans                  &trans  &trans  &trans        &trans            &trans                    &trans  &trans  &trans             &trans  &trans  &trans
&toggle_caps_layer_win  &trans  &trans  &trans        &trans            &trans                    &trans  &trans  &trans             &trans  &trans  &trans
&trans                  &trans  &trans  &trans        &trans            &trans  &trans    &trans  &trans  &trans  &trans             &trans  &trans  &trans
                                        &kp LEFT_ALT  &kp LEFT_CONTROL  &trans  &trans    &trans  &trans  &trans  &kp RIGHT_COMMAND
            >;
        };

        caps_layer_mac {
            // --------------------------------------------------------------------------------------------------------------
            // | LPAD  | BRDn | BRUp |  MUT |  Vo- |  Vo+ |                   |      |       |       |      |       |       |
            // |  F1   |  F2  |  F3  |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !   |  @   |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |      |      |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                       |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp RA(RG(RC(GRAVE)))  &kp RC(RA(RG(NUMBER_1)))  &kp RC(RA(RG(NUMBER_2)))  &kp RC(RA(RG(NUMBER_3)))  &kp RC(RA(RG(NUMBER_4)))  &kp RA(RC(RG(N5)))                     &trans        &kp STAR          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans            &kp LA(BACKSPACE)
&kp LS(TAB)            &kp LA(LEFT_ARROW)        &kp UP_ARROW              &kp LA(RIGHT_ARROW)       &kp RG(RC(RA(R)))         &kp RG(RC(RA(T)))                      &kp DOLLAR    &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp LEFT_BRACE         &kp RIGHT_BRACE   &kp BACKSLASH
&trans                 &kp LEFT_ARROW            &kp DOWN_ARROW            &kp RIGHT_ARROW           &kp RC(RG(RA(F)))         &kp RA(RG(RC(G)))                      &kp EQUAL     &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES     &kp GRAVE              &kp UNDERSCORE    &kp TILDE
&trans                 &kp LG(Z)                 &kp LS(LG(Z))             &kp BACKSPACE             &kp RA(RC(RG(V)))         &kp RA(RC(RG(B)))   &kp F13    &trans  &kp PLUS      &kp PLUS          &kp MINUS             &kp LESS_THAN          &kp GREATER_THAN  &kp RIGHT_SHIFT
                                                                           &trans                    &trans                    &kp LEFT_SHIFT      &trans     &trans  &kp QUESTION  &trans            &trans
            >;
        };

        caps_layer_win {
            bindings = <
&kp RA(RG(RC(GRAVE)))  &kp RC(RA(RG(NUMBER_1)))  &kp RC(RA(RG(NUMBER_2)))  &kp RC(RA(RG(NUMBER_3)))  &kp RC(RA(RG(NUMBER_4)))  &kp RA(RC(RG(N5)))                     &trans      &kp STAR          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans            &kp LA(BACKSPACE)
&kp LS(TAB)            &kp HOME                  &kp UP_ARROW              &kp END                   &kp RG(RC(RA(R)))         &kp RG(RC(RA(T)))                      &kp DOLLAR  &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp LEFT_BRACE         &kp RIGHT_BRACE   &kp BACKSLASH
&trans                 &kp LEFT_ARROW            &kp DOWN_ARROW            &kp RIGHT_ARROW           &kp RC(RG(RA(F)))         &kp RA(RG(RC(G)))                      &kp EQUAL   &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES     &kp GRAVE              &kp UNDERSCORE    &kp TILDE
&trans                 &kp LC(Z)                 &kp LC(Y)                 &kp BACKSPACE             &kp RA(RC(RG(V)))         &kp RA(RC(RG(B)))   &kp F13    &trans  &kp PLUS    &kp PLUS          &kp MINUS             &kp LESS_THAN          &kp GREATER_THAN  &kp RIGHT_SHIFT
                                                                           &trans                    &trans                    &kp LEFT_SHIFT      &trans     &trans  &trans      &trans            &trans
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp C_BRIGHTNESS_INC  &kp F1        &kp F2        &kp F3          &kp F4        &kp F5                                               &kp F6        &kp F7                &kp F8                 &kp F9       &kp F10        &trans
&kp C_BRIGHTNESS_DEC  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2    &kp NUMBER_3  &kp F6                                               &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp HASH     &kp CARET      &trans
&kp F4                &kp NUMBER_0  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp LA(LS(C_VOLUME_UP))                              &kp EQUAL     &kp EXCL              &kp AT                 &kp SLASH    &kp BACKSLASH  &trans
&kp LC(GRAVE)         &kp DOT       &kp N7        &kp NUMBER_8    &kp N9        &kp LA(LS(C_VOL_DN))     &kp C_PLAY_PAUSE    &trans  &kp KP_PLUS   &kp PLUS              &kp MINUS              &kp PERCENT  &kp RG(SLASH)  &trans
                                                  &kp C_PREVIOUS  &kp C_NEXT    &trans                   &trans              &trans  &trans        &trans                &trans
            >;
        };

        higher_layer {
            bindings = <
&trans  &trans    &trans    &trans          &trans           &trans                            &trans     &trans          &trans          &trans           &trans  &trans
&trans  &trans    &trans    &trans          &trans           &trans                            &trans     &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &trans  &trans
&trans  &mkp MB4  &mkp MB3  &mkp MB2        &mkp MB1         &msc SCRL_UP                      &mkp MCLK  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans
&trans  &mkp MB4  &mkp MB5  &msc SCRL_LEFT  &msc SCRL_RIGHT  &msc SCRL_DOWN  &trans    &trans  &trans     &msc SCRL_UP    &msc SCRL_DOWN  &trans           &trans  &trans
                            &trans          &trans           &kp ENTER       &trans    &trans  &trans     &trans          &trans
            >;
        };

        bluetooth_controls {
            bindings = <
&trans          &trans  &trans        &trans             &trans            &trans                                     &trans             &trans            &trans             &trans  &trans  &trans
&studio_unlock  &trans  &trans        &ext_power EP_OFF  &ext_power EP_ON  &ext_power EP_TOG                          &ext_power EP_TOG  &ext_power EP_ON  &ext_power EP_OFF  &trans  &trans  &trans
&trans          &trans  &bt BT_SEL 3  &bt BT_SEL 2       &bt BT_SEL 1      &bt BT_SEL 0                               &trans             &trans            &trans             &trans  &trans  &trans
&trans          &trans  &trans        &trans             &trans            &bt BT_CLR         &trans          &trans  &trans             &trans            &trans             &trans  &trans  &trans
                                      &trans             &trans            &tog 1             &out OUT_TOG    &trans  &trans             &trans            &trans
            >;
        };
    };
};
